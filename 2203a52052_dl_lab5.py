# -*- coding: utf-8 -*-
"""2203A52052_DL_Lab5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CR9Co9cxQdGIkAoTxeTwLY-s8Zzdg_mC
"""

import numpy as np

# Sigmoid Activation Function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivative of Sigmoid
def sigmoid_derivative(x):
    return sigmoid(x) * (1 - sigmoid(x))

# Mean Squared Error Function
def mean_squared_error(y_true, y_pred):
    return np.mean((y_true - y_pred) ** 2)

# Training Data (from Table 1)
X_train = np.array([
    [0.1, 0.2, 0.3],
    [0.2, 0.3, 0.4],
    [0.3, 0.4, 0.5],
    [0.5, 0.6, 0.7],
    [0.1, 0.3, 0.5],
    [0.2, 0.4, 0.6],
    [0.3, 0.5, 0.7],
    [0.4, 0.6, 0.8],
    [0.5, 0.7, 0.1]
])
y_train = np.array([0.5349, 0.5498, 0.5646, 0.5939, 0.5548, 0.5695, 0.5842, 0.5987, 0.5548])

# Test Data (from Table 2)
X_test = np.array([
    [0.6, 0.7, 0.8],
    [0.7, 0.8, 0.9]
])
y_test = np.array([0.6083, 0.6225])

# Initialize weights and bias
weights = np.random.rand(3)
bias = np.random.rand(1)
learning_rate = 0.01
epochs = 10000

# Training Loop
for epoch in range(epochs):
    # Forward Pass
    linear_output = np.dot(X_train, weights) + bias
    predictions = sigmoid(linear_output)

    # Calculate Error
    error = y_train - predictions

    # Backward Pass (Gradient Descent)
    gradient = error * sigmoid_derivative(linear_output)
    weights += learning_rate * np.dot(X_train.T, gradient)
    bias += learning_rate * np.sum(gradient)


train_error = mean_squared_error(y_train, predictions)
print("Final Training Error (MSE):", train_error)

test_predictions = sigmoid(np.dot(X_test, weights) + bias)
test_error = mean_squared_error(y_test, test_predictions)
print("Testing Error (MSE):", test_error)


def predict(inputs):
    inputs = np.array(inputs)
    output = sigmoid(np.dot(inputs, weights) + bias)
    return output

# Get user input
user_input = list(map(float, input("Enter values for x1, x2, x3 separated by spaces: ").split()))
predicted_output = predict(user_input)
print("Predicted Output:", predicted_output)